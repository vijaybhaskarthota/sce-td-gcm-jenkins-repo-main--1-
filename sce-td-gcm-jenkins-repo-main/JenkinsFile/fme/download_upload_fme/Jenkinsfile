#!groovy
def fme_props
def getFMEURL(String env,Map fme_props) {
    def FME_URL
    switch("${env}") {            
         case 'DEV': 
            FME_URL = "${fme_props['fme.server.url.dev']}"
            break; 
         case 'ST': 
            FME_URL = "${fme_props['fme.server.url.st']}"
            break; 
        case 'PT': 
            FME_URL = "${fme_props['fme.server.url.pt']}"
            break;        
        case 'REGR':
            FME_URL = "${fme_props['fme.server.url.reg']}"
            break;     
        case 'BF':
            FME_URL = "${fme_props['fme.server.url.bf']}"
            break;     
        case 'PROD':
            FME_URL = "${fme_props['fme.server.url.prod']}"
            break;     
      }
    return FME_URL
}
def getFMEToken(String env,Map fme_props) {
    echo "Inside  getFMEToken"
    def FME_TOKEN
    switch("${env}") {            
         case 'DEV': 
            FME_TOKEN = "${fme_props['fme.server.token.dev']}"
            break; 
         case 'ST': 
            FME_TOKEN = "${fme_props['fme.server.token.st']}"
            break; 
        case 'PT': 
            FME_TOKEN = "${fme_props['fme.server.token.pt']}"
            break;        
        case 'REGR':
            FME_TOKEN = "${fme_props['fme.server.token.reg']}"
            break;     
        case 'BF':
            FME_TOKEN = "${fme_props['fme.server.token.bf']}"
            break;     
        case 'PROD':
            FME_TOKEN = "${fme_props['fme.server.token.prod']}"
            break;     
      }
      echo "FME Token is :${FME_TOKEN}"
    return FME_TOKEN
}
def retriveFMERepository(String env){
    echo "retriveFMERepository Environmemnt:${env}"
    return ['DEV','ST','PT','REGR','BF','PROD']
}
def retriveFMEWorkspace(String env,String repository){
    echo "retriveFMEWorkspace Environment:${env},Repository:${repository}"
    return ['DEV','ST','PT','REGR','BF','PROD']
}
pipeline {
    agent any 
        options {
        office365ConnectorWebhooks([[name: "${env.JOB_NAME}", notifyAborted: true, notifyBackToNormal: true, notifyFailure: true, notifyNotBuilt: true, notifyRepeatedFailure: true, notifySuccess: true, notifyUnstable: true, startNotification: true, url: "${getJenkinsWebhookURL()}"]])
        buildDiscarder logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '30', daysToKeepStr: '30', numToKeepStr: '30')
        disableConcurrentBuilds()
        timestamps()
        //skipDefaultCheckout()
        }
    stages {
        stage('Initialize') { 
            steps {
                script{
                    fme_props = loadProperties("FME")
                    FMEUtil = new FMEUtils()
                }
            }
        }
        stage('Execute FME') { 
            environment {
                
                //FME_URL = "${fme_props['fme.server.url.st']}"
                //FME_TOKEN = "${fme_props['fme.server.token.st']}"
                FME_URL = getFMEURL("${ENVIRONMENT}",fme_props)
                FME_TOKEN = getFMEToken("${ENVIRONMENT}",fme_props)
                //FME_TOKEN="${(getFMEJobDetails("${ENVIRONMENT}",fme_props)).FMETOKEN}"
                
                // QUEUED_JOBS="none"
                // FME_PublishedParameters="{'publishedParameters': [{ \"name\": \"${FME_PublishedParameters_Name}\", \"value\": \"${FME_PublishedParameters_Value}\"}]}"
            }
            steps {
                script{

                    echo "Executing FME - Environment:${ENVIRONMENT},FME_URL:${FME_URL}"
                    //echo "Executing FME - Environment:${ENVIRONMENT},FME_URL:${FME_URL}, FME Repository:${FME_REPOSITORY}, FME Workspace:${FME_WORKSPACE}, FME_BODY: ${FME_PublishedParameters}"
                    powershell label: 'Executing FME', script: '.\\JenkinsFile\\fme\\download_upload_fme\\extract_fme.ps1'             
                    // executeFME("${FME_URL}", "${FME_TOKEN}", "${FME_REPOSITORY}","${FME_WORKSPACE}","${FME_PublishedParameters}")
                    echo "control is back here"
                    //def QUEUED_JOBS= FMEUtil.getNumberOfQueuedFMEJobs("${FME_URL}", "${FME_TOKEN}", "${FME_REPOSITORY}","${FME_WORKSPACE}","${FME_PublishedParameters}")
                    //echo "Number of queued FME job is: ${QUEUED_JOBS} "
                }
            }
        }
   }
    post { 
        always { 

            //archiveArtifacts artifacts: 'CICD/*.sql,CICD/*.log,*.log,output/*', followSymlinks: false
            //publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'output', reportFiles: 'CodeAnalysisReport.html', reportName: 'Code Analysis Report', reportTitles: 'CodeAnalysisReport'])
            echo "Proceeding with Cleanup Activities"
            //cleanWs()
        }
        success {
            script {
                echo " Script successful Statuscode is ${env.STATUSCODE}"
                                
                if ("${env.STATUSCODE}" == '200'){
                    error "FME Build Failed"
                    }
                }
            //office365ConnectorSend color: '#00FF00', message: "Completed ${env.BRANCH} ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", status: 'Success', webhookUrl: "${getJenkinsWebhookURL()}"
        }
        failure{
            script {
                echo "Inside Failure: ${env.STATUSCODE}"
            //office365ConnectorSend color: '#FF0000', message: "Completed ${env.BRANCH} ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", status: 'Failure', webhookUrl: "${getJenkinsWebhookURL()}"
            
                if ("${env.STATUSCODE}" != '200'){
                        error "FME Build Failed"
                    }
        } }


    }
}