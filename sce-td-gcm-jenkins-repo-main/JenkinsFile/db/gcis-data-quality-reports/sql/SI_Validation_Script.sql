
SET SERVEROUTPUT ON;
DECLARE
V_COUNT NUMBER;
BEGIN
SELECT  COUNT(1) INTO V_COUNT  FROM TCGACDS.EMS_ACLNSGMNT WHERE ACLINESEGMENT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_ACLINESEGMENT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_ACLNSGMNT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_ANALOG WHERE ANALOG_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_ANALOG WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_ANALOG ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_ANALOGVALUE WHERE ANALOGVALUE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_ANALOGVALUE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_ANALOGVALUE ' || V_COUNT);
SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_APP_POWER_LIMIT WHERE APPARENTPOWERLIMIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_APPARENTPOWERLIMIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_APP_POWER_LIMIT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_BASEVOLTAGE WHERE BASEVOLTAGE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_BASEVOLTAGE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_BASEVOLTAGE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_BREAKER WHERE BREAKER_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_BREAKER WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_BREAKER ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_BUSBAR_SECTION WHERE BUSBARSECTION_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_BUSBARSECTION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_BUSBAR_SECTION ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_CONFLDGROUP WHERE CONFORMLOADGROUP_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_CONFORMLOADGROUP WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_CONFLDGROUP ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_CONFORM_LOAD WHERE CONFORMLOAD_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_CONFORMLOAD WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_CONFORM_LOAD ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_CON_NODE WHERE CONNECTIVITYNODE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_CONNECTIVITYNODE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_CON_NODE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_CURVE_DATA WHERE CURVEDATA_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_CURVEDATA WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_CURVE_DATA ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_DISCONNECTOR WHERE DISCONNECTOR_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_DISCONNECTOR WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_DISCONNECTOR ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_DISCRETE WHERE DISCRETE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_DISCRETE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_DISCRETE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_DISCRETE_VALUE WHERE DISCRETEVALUE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_DISCRETEVALUE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_DISCRETE_VALUE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_FOSSIL_FUEL WHERE FOSSILFUEL_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_FOSSILFUEL WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_FOSSIL_FUEL ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_GENUNT WHERE GENERATINGUNIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_GENERATINGUNIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_GENUNT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_GEOG_REGION WHERE GEOGRAPHICALREGION_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_GEOGRAPHICALREGION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_GEOG_REGION ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_HYDRO_GENR_UNIT WHERE HYDROGENERATINGUNIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_HYDROGENERATINGUNIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_HYDRO_GENR_UNIT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_LNR_SHNT_COMP WHERE LINEARSHUNTCOMPENSATOR_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_LINEARSHUNTCOMPENSATOR WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_LNR_SHNT_COMP ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_LOAD_AREA WHERE LOADAREA_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_LOADAREA WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_LOAD_AREA ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_MSRMNT_VAL_SRC WHERE MEASUREMENTVALUESOURCE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_MEASUREMENTVALUESOURCE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_MSRMNT_VAL_SRC ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_NONCONFLDGROUP WHERE NONCONFORMLOADGROUP_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_NONCONFORMLOADGROUP WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_NONCONFLDGROUP ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_NONCONFORM_LOAD WHERE NONCONFORMLOAD_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_NONCONFORMLOAD WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_NONCONFORM_LOAD ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_NUCLEARGEN_UNT WHERE NUCLEARGENERATINGUNIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_NUCLEARGENERATINGUNIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_NUCLEARGEN_UNT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_OPLIMIT_TYPE WHERE OPERATIONALLIMITTYPE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_OPERATIONALLIMITTYPE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_OPLIMIT_TYPE ' || V_COUNT);
SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_PHSTAPCHNGR_LINEAR WHERE PHASETAPCHANGERLINEAR_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_PHASETAPCHANGERLINEAR WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_PHSTAPCHNGR_LINEAR ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_POWER_TRNFMR WHERE POWERTRANSFORMER_ID NOT IN (SELECT REPLACE(MRID,'TRU_') FROM TCGACDS.GCM_SCIM_POWERTRANSFORMER WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_POWER_TRNFMR ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_RACTV_CAP_CURVE WHERE REACTIVECAPABILITYCURVE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_REACTIVECAPABILITYCURVE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_RACTV_CAP_CURVE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_RATIO_TAP_CHNGR WHERE RATIOTAPCHANGER_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_RATIOTAPCHANGER WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_RATIO_TAP_CHNGR ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_REG_CNTRL WHERE REGULATINGCONTROL_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_REGULATINGCONTROL WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_REG_CNTRL ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SEASON WHERE SEASON_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SEASON WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SEASON ' || V_COUNT);
SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SERIES_COMPENS WHERE SERIESCOMPENSATOR_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SERIESCOMPENSATOR WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SERIES_COMPENS ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SUBSTATION WHERE SUBSTATION_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SUBSTATION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SUBSTATION ' || V_COUNT||' '||'COUNT WILL DIFFERED BECAUSE OF MASTER KEY IMPLEMENTATION');
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SUB_GEOG_REGION WHERE SUBGEOGRAPHICALREGION_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SUBGEOGRAPHICALREGION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SUB_GEOG_REGION ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SUB_LOAD_AREA WHERE SUBLOADAREA_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SUBLOADAREA WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SUB_LOAD_AREA ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_SYNC_MACHINE WHERE SYNCHRONOUSMACHINE_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_SYNCHRONOUSMACHINE WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_SYNC_MACHINE ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_TAP_CHNGR_CNTRL WHERE TAPCHANGERCONTROL_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_TAPCHANGERCONTROL WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_TAP_CHNGR_CNTRL ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_TERMINAL WHERE TERMINAL_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_TERMINAL WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_TERMINAL ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_THERMAL_GENERATING_UNT WHERE THERMALGENERATINGUNIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_THERMALGENERATINGUNIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_THERMAL_GENERATING_UNT ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_VOLTAGE_LEVEL WHERE VOLTAGELEVEL_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_VOLTAGELEVEL WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')) ;
DBMS_OUTPUT.PUT_LINE('EMS_VOLTAGE_LEVEL ' || V_COUNT);
SELECT  COUNT(1) INTO V_COUNT FROM TCGACDS.EMS_VOLTAGE_LIMIT WHERE VOLTAGELIMIT_ID NOT IN (SELECT MRID FROM TCGACDS.GCM_SCIM_VOLTAGELIMIT WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y'));
DBMS_OUTPUT.PUT_LINE('EMS_VOLTAGE_LIMIT ' || V_COUNT);
END ;
/
--189 GESW vs SCIM

DECLARE 
V_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO V_COUNT FROM(SELECT * FROM TCGACDS.SUBSTATION WHERE TO_NUMBER(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2))) <=
    (SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE')
AND TO_NUMBER(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2))) <=
    (SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE')
AND SUBST_STAT_CD='I' AND SUBST_ID NOT IN (SELECT GCM_SUBSTATION_ID FROM TCGACDS.GCM_V_SUB_I_SUBSTATION WHERE GCM_SOR='GESW')
AND SUBSTATION_NO NOT IN (SELECT IDENTIFIERNAME FROM TCGACDS.GCM_V_SUB_I_SUBSTATION WHERE GCM_SOR='EMS' AND IDENTIFIERNAME IS NOT NULL)
AND NAME NOT IN (SELECT NAME FROM TCGACDS.GCM_V_SUB_I_SUBSTATION WHERE GCM_SOR='EMS'));
 IF V_COUNT =0
 THEN
DBMS_OUTPUT.PUT_LINE(' GESW vs SCIM DATA SHOULD BE ZERO SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE(' GESW vs SCIM DATA SHOULD BE ZERO NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/



--168


DECLARE 
V_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO V_COUNT FROM(SELECT * FROM TCGACDS.GCM_SUB_I_CONN_SUBSTATIONS WHERE SOR='GESW' AND MRID not IN (SELECT
M3I_OBJECT_ID FROM TCGACDS.SUBSTATION));
 IF V_COUNT =0
 THEN
DBMS_OUTPUT.PUT_LINE('SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--147

DECLARE 
V_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO V_COUNT FROM(SELECT * FROM TCGACDS.GCM_SUB_I_CONN_SUBSTATIONS WHERE SOR='EMS' AND MRID NOT IN (SELECT
MRID FROM TCGACDS.GCM_V_SUB_I_SUBSTATION WHERE TYP IS NOT NULL));
 IF V_COUNT =0
 THEN
DBMS_OUTPUT.PUT_LINE('SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--142

DECLARE 
V_COUNT NUMBER;
BEGIN
seLECT COUNT(SUBSTATION_NAME)INTO V_COUNT FROM TCGACDS.GCM_SUB_I_LINK_DISTCON WHERE CONNECTIVITYNODEID NOT IN(
SELECT MRID FROM TCGACDS.GCM_V_SUB_I_CON_NODE WHERE MRID LIKE '%HIGH%');
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('COMMON NODE CHECK SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--139

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(1)INTO V_COUNT FROM TCGACDS.GCM_V_SUB_I_EQ_INJECT WHERE  TYP='HIGHSIDE_CIRCUIT_OUTGOING';
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('High Side Feeder data with typ as HIGHSIDE_CIRCUIT_OUTGOING SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('High Side Feeder data with typ as HIGHSIDE_CIRCUIT_OUTGOING NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--138

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.GCM_V_SUB_I_EQ_INJECT;

 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('High Side Feeder total count  SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('High Side Feeder total count NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--136

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.GCM_SUB_DIST_JOB_STATUS;
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('GESW JOB STATUS DATA SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('GESW JOB STATUS DATA NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--132

DECLARE 
V_COUNT NUMBER;
BEGIN

SELECT COUNT(1) INTO V_COUNT FROM TCGACDS.GCM_SCIM_SHORTCIRCUITDUTYINFO;
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('SCD DATA SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('SCD DATA NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--125

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(NAME)  INTO V_COUNT FROM (
SELECT DISTINCT SUB.NAME AS NAME FROM TCGACDS.GCM_SCIM_BUSBARSECTION BUS JOIN TCGACDS.GCM_SCIM_SUBSTATION SUB ON BUS.GCM_SUBSTATION_ID=SUB.MRID AND
BUS.GCM_JOBID=SUB.GCM_JOBID AND SUB.TYP IS NOT NULL
WHERE BUS.GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')
AND BUS.NAME NOT IN(SELECT DISTINCT TRIM(UPPER(NETWORK_ID)) FROM TCGACDS.GCM_REDBOOK_STAGING WHERE NETWORK_TYPE='SUBSTATION') ORDER BY NAME);
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE(' Substation unavailable in Redbook for valid EMS Substation SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Substation unavailable in Redbook for valid EMS Substation NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--117

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(NETWORK_ID) INTO V_COUNT FROM(
SELECT DISTINCT TRIM(UPPER(NETWORK_ID)) AS NETWORK_ID FROM TCGACDS.GCM_REDBOOK_STAGING WHERE NETWORK_TYPE='SUBSTATION' AND TRIM(UPPER(NETWORK_ID)) NOT IN
(SELECT SUB.NAME FROM TCGACDS.SUBSTATION SUB WHERE TO_NUMBER(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))<40 AND TO_NUMBER(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<40)
AND TRIM(UPPER(NETWORK_ID)) NOT IN (SELECT NAME FROM TCGACDS.GCM_SCIM_BUSBARSECTION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y') AND GCM_SUBSTATION_ID IN 
(SELECT MRID FROM TCGACDS.GCM_SCIM_SUBSTATION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y') AND TYP IS NOT NULL))
ORDER BY TRIM(UPPER(NETWORK_ID)));
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('Available in Redbook but Substation/Bus unavailable in GESW/EMS SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Available in Redbook but Substation/Bus unavailable in GESW/EMS NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--109

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(NAME)INTO V_COUNT FROM(
SELECT NAME FROM TCGACDS.SUBSTATION WHERE TO_NUMBER(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))<40 
AND TO_NUMBER(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<40
AND SUBSTATION_NO NOT IN (SELECT SAP_FLOC FROM TCGACDS.EMS_SUBSTATION WHERE SAP_FLOC IS NOT NULL)
AND NAME NOT IN(SELECT DISTINCT TRIM(NETWORK_ID) FROM TCGACDS.GCM_REDBOOK_STAGING WHERE NETWORK_TYPE='SUBSTATION') ORDER BY NAME);
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('Substation unavailable in Redbook for GESW Substation not coming from EMS SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Substation unavailable in Redbook for GESW Substation not coming from EMS NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--101

DECLARE 
V_COUNT NUMBER;
BEGIN


SELECT COUNT(NAME)INTO V_COUNT FROM(
SELECT NAME FROM TCGACDS.SUBSTATION WHERE TO_NUMBER(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))<40 
AND TO_NUMBER(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<40
AND NAME NOT IN(SELECT DISTINCT TRIM(NETWORK_ID) FROM TCGACDS.GCM_REDBOOK_STAGING WHERE NETWORK_TYPE='SUBSTATION') ORDER BY NAME);
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE(' Substation unavailable in Redbook for valid GESW Substation SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Substation unavailable in Redbook for valid GESW Substation NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--95

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(NAME) INTO V_COUNT FROM(
SELECT DISTINCT NAME FROM TCGACDS.GCM_SCIM_BUSBARSECTION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y') AND GCM_SUBSTATION_ID IN 
(SELECT MRID FROM TCGACDS.GCM_SCIM_SUBSTATION WHERE GCM_JOBID=(SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y') AND TYP IS NOT NULL)
AND NAME NOT IN(SELECT DISTINCT TRIM(UPPER(NETWORK_ID)) FROM TCGACDS.GCM_REDBOOK_STAGING WHERE NETWORK_TYPE='SUBSTATION') ORDER BY NAME);
 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('Bus unavailable in Redbook for valid EMS Substation SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Bus unavailable in Redbook for valid EMS Substation NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--91

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM(
SELECT * FROM TCGACDS.GCM_SCIM_EQUIVALENTINJECTION WHERE GCM_JOBID = (SELECT JOBID FROM TCGACDS.GCM_PROCESS_STATUS WHERE ACTIVEJOBID='Y')
AND EQUIPMENTCONTAINER IS NULL);
 IF V_COUNT = 0
 THEN
DBMS_OUTPUT.PUT_LINE('Equivalent Injection EquipmentContainer SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('Equivalent Injection EquipmentContainer NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--84

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM(
SELECT CL.*,NA.NAME_NAME circt_id from TCGACDS.EMS_CONFORM_LOAD CL JOIN TCGACDS.EMS_NAME NA ON CL.IDENTIFIEDOBJECT_NAME_RESOURCE=NA.NAME_ID 
JOIN TCGACDS.CIRCUIT_HEAD CH ON NA.NAME_NAME=TO_CHAR(CH.CIRCT_ID)
WHERE NA.NAME_NAME NOT IN(SELECT CLI.NAME FROM TCGACDS.GCM_SCIM_CONFORMLOADIDENTIFIER CLI 
JOIN TCGACDS.CIRCUIT_HEAD CH ON CLI.NAME=TO_CHAR(CH.CIRCT_ID) WHERE CLI.GCM_JOBID=
(SELECT PS.JOBID FROM TCGACDS.GCM_PROCESS_STATUS PS WHERE PS.ACTIVEJOBID='Y') AND CLI.NAMETYPE='SCE_SAP_ID'));
 IF V_COUNT = 0
 THEN
DBMS_OUTPUT.PUT_LINE('EMS Low Side Circuit SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('EMS Low Side Circuit NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;

/
--70

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM(WITH MAX_JOB AS (SELECT SUB.MRID, TO_CHAR(MAX(TO_NUMBER(SUB.GCM_JOBID))) JOB_ID FROM TCGACDS.GCM_SCIM_SUBSTATION SUB JOIN TCGACDS.GCM_SUB_DIST_JOB_STATUS JOB 
                   ON JOB.JOBID=SUB.GCM_JOBID  WHERE GCM_SOR='GESW' AND JOB.CURRENT_JOB<>'Y' AND JOB.SUCCESS='Y' GROUP BY SUB.MRID)
SELECT ch.circt_id,ch.circuit_no,ch.circuit_name,ch.m3i_object_id,ch.subst_id,ch.substation_no,ch.substation_name,ch.voltage,ch.circt_stat_cd,ch.in_serv_datetime
FROM TCGACDS.SUBSTATION_CONNECT_POINT CP JOIN TCGACDS.CIRCUIT_HEAD CH ON REGEXP_SUBSTR(CP.NAME,'[^|]+',1,2)=
CH.CIRCUIT_NAME JOIN TCGACDS.SUBSTATION SUB 
ON SUB.ID=CP.SUBSTATION_ID AND CH.SUBST_ID=SUB.SUBST_ID AND
to_number(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<(SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE') 
AND to_number(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))< (SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE') AND SUB.SUBST_STAT_CD='I'
left outer join (SELECT CL.NAME FROM TCGACDS.GCM_SCIM_CONFORMLOAD CL JOIN MAX_JOB MJ ON CL.GCM_SUBSTATION_ID=MJ.MRID
AND CL.GCM_JOBID=MJ.JOB_ID) GCM on CH.CIRCUIT_NAME=GCM.NAME
WHERE CP.NAME LIKE 'LOW%' AND GCM.NAME is null);

 IF V_COUNT = 0
 THEN
DBMS_OUTPUT.PUT_LINE('GESW Low Side Circuit SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('GESW Low Side Circuit NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/
--59

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM(WITH MAX_JOB AS (SELECT MRID, TO_CHAR(MAX(TO_NUMBER(GCM_JOBID))) JOB_ID FROM TCGACDS.GCM_SCIM_SUBSTATION SUB JOIN TCGACDS.GCM_SUB_DIST_JOB_STATUS JOB 
            ON JOB.JOBID= SUB.GCM_JOBID  WHERE GCM_SOR = 'GESW' AND JOB.CURRENT_JOB<>'Y' AND JOB.SUCCESS='Y' GROUP BY MRID)
SELECT * FROM TCGACDS.SUBSTATION_CONNECT_POINT WHERE CIRCUIT_NAME1 NOT IN (
SELECT REPLACE(NAME, 'EIN_HighSideCircuitName_') FROM TCGACDS.GCM_SCIM_EQUIVALENTINJECTION EQ JOIN MAX_JOB MJ ON EQ.GCM_SUBSTATION_ID=MJ.MRID
AND MJ.JOB_ID=EQ.GCM_JOBID) AND
SUBSTATION_ID IN (SELECT ID FROM TCGACDS.SUBSTATION WHERE TO_NUMBER(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))<=(SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE')
AND TO_NUMBER(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<=(SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE')
AND SUBST_STAT_CD='I') AND 
NAME LIKE 'HIGH%' AND CIRCUIT_NAME1 IS NOT NULL);

 IF V_COUNT <> 0
 THEN
DBMS_OUTPUT.PUT_LINE('SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;

/
--49

DECLARE 
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM(WITH MAX_JOB AS (SELECT SUB.MRID, TO_CHAR(MAX(TO_NUMBER(SUB.GCM_JOBID))) JOB_ID FROM TCGACDS.GCM_SCIM_SUBSTATION SUB JOIN TCGACDS.GCM_SUB_DIST_JOB_STATUS JOB 
                   ON JOB.JOBID=SUB.GCM_JOBID  WHERE GCM_SOR='GESW' AND JOB.CURRENT_JOB<>'Y' AND JOB.SUCCESS='Y' GROUP BY SUB.MRID)
select * from TCGACDS.substation WHERE to_number(SUBSTR(HIGH_VOLTAGE,0,(LENGTH(HIGH_VOLTAGE)-2)))<
(SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE') 
AND to_number(SUBSTR(LOW_VOLTAGE,0,(LENGTH(LOW_VOLTAGE)-2)))< 
(SELECT CONFIG_VALUE FROM TCGACDS.GCM_CONFIG_VALUES WHERE CONFIG_KEY = 'B-BANK_MIN_HIGH_VOLTAGE')
AND M3I_OBJECT_ID NOT IN (SELECT CL.MRID FROM TCGACDS.GCM_SCIM_SUBSTATION CL JOIN MAX_JOB MJ ON CL.MRID=MJ.MRID
AND CL.GCM_JOBID=MJ.JOB_ID) and subst_stat_cd='I');

 IF V_COUNT = 0
 THEN
DBMS_OUTPUT.PUT_LINE('GESW SUBSTATION SUCCESSFUL |'|| V_COUNT);
ELSE 
DBMS_OUTPUT.PUT_LINE('GESW SUBSTATION NEED TO VALIDATE |'|| V_COUNT); 
END IF;
END;
/